# .github/workflows/build-docs.yml

name: Build Documentation

# 触发条件：当推送到 master 分支或有人向 master 分支发起 Pull Request 时运行
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-documentation:
    # 使用最新的 Ubuntu 运行环境
    runs-on: ubuntu-latest

    steps:
      # 第一步：检出仓库代码
      # 拉取你的仓库代码到 Actions 的运行环境中
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：安装 Pandoc
      # Pandoc 是一个强大的文档转换工具，可以处理多种格式
      - name: Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: 'latest' # 使用最新版本的 Pandoc

      # 第三步：安装 LaTeX (用于生成 PDF)
      # Pandoc 需要一个 LaTeX 引擎来将 Markdown 转换为 PDF
      - name: Install LaTeX distribution for PDF generation
        run: sudo apt-get update && sudo apt-get install -y texlive-xetex texlive-fonts-recommended

      # 第四步：创建用于存放输出文件的目录
      - name: Create output directory
        run: mkdir -p built_docs

      # 第五步：合并所有 Markdown 文件
      # 假设你的文档源文件都在 'docs' 目录下
      # 这个命令会查找 'docs' 目录下的所有 .md 文件，并按字母顺序将它们合并成一个大的 Markdown 文件
      # 注意：你可能需要根据文档的实际结构和期望的章节顺序来调整这个命令
      - name: Concatenate Markdown files
        run: |
          echo "# LVGL Documentation" > built_docs/full_documentation.md
          find docs -name "*.md" -print0 | sort -z | xargs -0 -I {} sh -c 'cat {}; echo -e "\\n\\n"' >> built_docs/full_documentation.md

      # 第六步：使用 Pandoc 构建 HTML 文件
      # --standalone (-s): 生成一个包含完整头尾的独立 HTML 文件
      # --toc: 自动生成目录
      # --metadata title="...": 设置文档标题
      - name: Build HTML
        run: >
          pandoc built_docs/full_documentation.md 
          -o built_docs/documentation.html 
          --standalone 
          --toc 
          --metadata title="LVGL Documentation"

      # 第七步：使用 Pandoc 构建 PDF 文件
      # --pdf-engine=xelatex: 使用 XeLaTeX 引擎，对中文字符等有更好的支持
      - name: Build PDF
        run: >
          pandoc built_docs/full_documentation.md 
          -o built_docs/documentation.pdf 
          --pdf-engine=xelatex 
          --toc 
          --metadata title="LVGL Documentation"

      # 第八步：上传构建产物
      # 将 'built_docs' 目录下的所有文件打包成一个名为 'documentation-artifacts' 的产物
      # 你可以在 Action 运行结束后，在页面上手动下载这个产物
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation-artifacts
          path: built_docs/
